random <- data.frame(x = rnorm(1:100000))
for(j in 1:10){
sample_means <- data.frame(x = 1:sample(1:100000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j])
}
else
points(length(sample_means$x),diff_means[j])
}
sort(diff_means)
plot(sort(diff_means))
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:100){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
}
plot(sort(diff_means))
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:100){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
plot(length(sample_means$x),diff_means[j])
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:100){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j])
}
else
points(length(sample_means$x),diff_means[j])
}
min(diff_means)
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j])
}
else
points(length(sample_means$x),diff_means[j])
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j])
}
else
points(length(sample_means$x),diff_means[j])
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j])
}
else
points(length(sample_means$x),diff_means[j])
}
}
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
else
points(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
else
points(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
else{
points(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
}
################
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
else{
points(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
}
}
plot(length(sample_means$x),diff_means[j], xlim=(1000,8000),ylim=(-0.0024,0.1))
plot(length(sample_means$x),diff_means[j], xlim=1000:8000, ylim=-0.0024:0.1)
plot(length(sample_means$x),diff_means[j], xlim=(1000:8000), ylim=(-0.0024:0.1))
?plot
?hist
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j])
}
else{
points(length(sample_means$x),diff_means[j])
}
}
plot(10000,0.0001)
plot(10000,-0.0001)
plot(8000,-0.0001)
plot(7000,-0.0001)
plot(5000,-0.0001)
plot(6000,-0.0001)
plot(7000,-0.0001)
plot(6000,-0.0001)
points(4000,0.001)
points(4000,-0.001)
points(4000,-0.00012)
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
}
summary(diff_means)
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
}
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=c(0,10000),ylim=c(-0.01,0.01))
}
else{
points(length(sample_means$x),diff_means[j])
}
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:50){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=c(0,10000),ylim=c(-0.01,0.01))
}
else{
points(length(sample_means$x),diff_means[j])
}
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:100){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=c(0,10000),ylim=c(-0.01,0.01))
}
else{
points(length(sample_means$x),diff_means[j])
}
}
diff_means=c()
random <- data.frame(x = rnorm(1:10000))
for(j in 1:1000){
sample_means <- data.frame(x = 1:sample(1:10000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
#hist(random$x)
#hist(sample_means$x)
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=c(0,10000),ylim=c(-0.01,0.01))
}
else{
points(length(sample_means$x),diff_means[j])
}
}
diff_means=c()
random <- data.frame(x = rnorm(1:100000))
for(j in 1:1000){
sample_means <- data.frame(x = 1:sample(1:100000,1,replace=FALSE))
for (i in 1:length(sample_means$x)){
sample <- random[sample(1:nrow(random), 100,
replace=FALSE),]
sample_means[i,] <- mean(sample)
}
diff_means[j] <- abs(mean(random$x))- abs(mean(sample_means$x))
print(diff_means[j])
if(j==1)
{
plot(length(sample_means$x),diff_means[j], xlim=c(0,10000),ylim=c(-0.01,0.01))
}
else{
points(length(sample_means$x),diff_means[j])
}
}
mtcars
library(ggplot2)
ggplot(mtcars, aes(x=cyl, y=mpg, fill=vs))+geom_bar(position="dodge")
ggplot(mtcars, aes(x=cyl, y=mpg, fill=vs))+geom_bar(position="dodge", stat="bin")
ggplot(mtcars, aes(x=cyl, y=mpg, fill=vs))+geom_bar(position="dodge", stat="identity")
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(vs)))+geom_bar(position="dodge")
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(vs)))+geom_bar(position="dodge", stat="bin")
ggplot(mtcars, aes(x=cyl, y=mpg, fill=factor(vs)))+geom_bar(position="dodge", stat="identity")
mtcars
ggplot(mtcars, aes(x=factor(cyl), y=mpg, fill=factor(vs)))+geom_bar(position="dodge")
ggplot(mtcars, aes(x=factor(cyl), y=mpg, fill=factor(vs)))+geom_bar(position="dodge", stat="identity")
ggplot(mtcars, aes(x=factor(cyl), y=mpg, fill=factor(vs)))+geom_bar(stat="identity")
install.packages("gcookbook")
install.packages("gcookbook")
library(gcookboom)
library(gcookbook)
install.packages("gcookbook")
install.packages("ggvis")
install.packages("sqldf")
install.packages("lubridate")
install.packages("reshape2")
install.packages("gcookbook")
setwd("~/Desktop/E/kaggle data/Rossman_store")
library(readr)
library(magrittr)
library(data.table)
library(zoo)
library(forecast)
library(xgboost)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(gbm)
library(dplyr)
#library()
train=read_csv("train.csv", col_types=list(
Store = col_integer(),
DayOfWeek= col_integer(),
Date = col_date(),
Sales = col_integer(),
Customers = col_integer(),
Open = col_integer(),
Promo = col_integer(),
StateHoliday = col_character(),
SchoolHoliday = col_integer()))
test=read.csv("test.csv")
store=read.csv("store.csv")
#train$Date=NULL
#test$Date=NULL
train=merge(train,store, by="Store")
test=merge(test,store, by="Store")
test$Open[is.na(test$Open)] = 1
train[is.na(train)]   <- 0
test[is.na(test)]   <- 0
train_all=train
train <- train[ -which(train$Open=='1' & train$Sales==0),]
train <- train[ which(train$Sales!='0'),]
train = train[which(train$Open==1),]
train$Date=as.Date(train$Date)
test$Date=as.Date(test$Date)
train$month <- as.integer(format(train$Date, "%m"))
train$year <- as.integer(format(train$Date, "%y"))
train$day <- as.integer(format(train$Date, "%d"))
test$month <- as.integer(format(test$Date, "%m"))
test$year <- as.integer(format(test$Date, "%y"))
test$day <- as.integer(format(test$Date, "%d"))
train <- train[,-c(3,8)]
test <- test[,-c(4,7)]
############ filling missing gaps ##############
################################
feature.names <- names(train)[c(1,2,6,8:12,14:18)]
cat("Feature Names\n")
feature.names
cat("assuming text variables are categorical & replacing them with numeric ids\n")
for (f in feature.names) {
if (class(train[[f]])=="character") {
levels <- unique(c(train[[f]], test[[f]]))
train[[f]] <- as.integer(factor(train[[f]], levels=levels))
test[[f]]  <- as.integer(factor(test[[f]],  levels=levels))
}
}
tra<-train[,feature.names]
RMPSE<- function(preds, dtrain) {
labels <- getinfo(dtrain, "label")
elab<-exp(as.numeric(labels))-1
epreds<-exp(as.numeric(preds))-1
err <- sqrt(mean((epreds/elab-1)^2))
return(list(metric = "RMPSE", value = err))
}
nrow(train)
h<-sample(nrow(train),100000)
dval<-xgb.DMatrix(data=data.matrix(tra[h,]),label=log1p(train$Sales)[h])
dtrain<-xgb.DMatrix(data=data.matrix(tra[-h,]),label=log1p(train$Sales)[-h])
watchlist<-list(val=dval,train=dtrain)
param <- list(  objective           = "reg:linear",
booster = "gbtree",
eta                 = 0.20, # 0.06, #0.01,
max_depth           = 15, #changed from default of 8
subsample           = 0.7, # 0.7
colsample_bytree    = 0.7, # 0.7
min_child_weight    = 0.2
# alpha = 0.0001,
# lambda = 1
)
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = 800, #300, #280, #125, #250, # changed from 300
verbose             = 1,
early.stop.round    = 30,
watchlist           = watchlist,
maximize            = FALSE,
feval=RMPSE
)
#test1=test[test$Open==1,]
#test2=test[test$Open==0,]
pred1 <- exp(predict(clf, data.matrix(test[,feature.names]))) -1
#test1$Sales=pred1
#test2$Sales=0
#test=rbind(test1,test2)
submission <- data.frame(ID=test$Id, Sales=pred1)
mean(submission$Sales)
str9train
str(train)
